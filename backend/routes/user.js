//Import the Express.js library, which is used to create web applications and APIs in Node.js
import express from 'express';

import { database } from '../server.js'; 
import { ref, set, get, remove, push } from 'firebase/database';

//Creating an instance of an Express router, 
//Used to define route handlers for different HTTP methods and paths
const router = express.Router();

// Add a new user
router.post('/newUser', async (req, res) => {

    try {
        // console.log(req.body)
        const newUser = req.body; // new user information

        // Access user database
        const usersRef = ref(database, 'users');

        // Check for availability of username
        const username = newUser.username;
        
        const snapshot = await get(usersRef); // Get all users
        const users = snapshot.val();
            
        // Iterate through users to find a match
        for (const userId in users) {
            const user = users[userId];

            if (user.username === username) {
                // Found a matching user
                return res.status(400).send("Username already exists." ); 
            }
        }

        // Continues if unique username
        const newUserRef = push(usersRef);
        await set(newUserRef, newUser);

        // Extract the unique ID generated by push
        const newUserId = newUserRef.key;

        // Send the response with the user ID
        res.status(201).send({ message: 'User created successfully.', userId: newUserId });

    } catch (error) {
        console.error("Error adding user:", error);
        res.status(500).send('Internal Server Error');
    }

});

// User log in/ getting user id
router.get('/', async (req, res) => {

    try {
        const { username, password } = req.query;
        // console.log(username)
        // console.log(password)
        // console.log(req.query)
        // const { username, password } = req.body;
        const usersRef = ref(database, 'users');

        // Get all users
        const snapshot = await get(usersRef);


        if (snapshot.exists()) {
            const users = snapshot.val();
            
            // Iterate through users to find a match
            for (const userId in users) {
                const user = users[userId];

                if (user.username === username && user.password === password) {
                    // Found a matching user
                    return res.status(200).send({message:`User: ${username}, logged in successfully`, userId }); // Send the user ID in response
                }
                else if(user.username === username) {
                    return res.status(400).send(`Incorrect password for user: ${username}`); // Correct username, Incorrect password
                }
            }

            // No matching user found
            return res.status(404).send('User not found');

        } 
        else {
            // No users found in the database
            return res.status(404).send('No users found');
        }
        
        
    } catch (error) {
        console.error("Error retrieving user:", error);
        res.status(500).send('Internal Server Error');
    }

});


//Exporting the router object, making it available for use in other parts of the application
//Can import this router into main application file (e.g., server.js) 
//and mount it at a specific path to handle user authentication requests.
export default router;